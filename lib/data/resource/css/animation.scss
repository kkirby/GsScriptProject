@import (css)(sys.math);
@import (css)(sys.map);
@import (css)(sys.animationTweens);

@function _tween($func,$start,$end,$time,$duration){
	$p: $time / $duration;
	@if $p >= 1 {
		@return $end;
	}
	$v: 0;
	@if $func == linear {
		$v: tweenLinear($p);
	}
	@elseif $func == easeIn {
		$v: tweenEaseIn($p);
	}
	@elseif $func == easeOut {
		$v: tweenEaseOut($p);
	}
	@elseif $func == easeInOut {
		$v: tweenEaseInOut($p);
	}
	@elseif $func == backIn {
		$v: tweenBackIn($p);
	}
	@elseif $func == backOut {
		$v: tweenBackOut($p);
	}
	@elseif $func == elastic {
		$v: tweenElastic($p);
	}
	@elseif $func == bounce {
		$v: tweenBounce($p);
	}
	
	@if type-of($start) == color {
		@return mix($end,$start,percentage(min($v,1)));
	}
	@else {
		$ret: max($start + ($end - $start) * $v,0);
		@if unitless($ret) {
			@return round($ret * 1000) / 1000;
		}
		@if unit($ret) == px {
			@return round($ret);
		}
		@else {
			@return round($ret * 100) / 100;
		}
	}
}

@mixin tween($name,$animations){
	$iterations: ();
	@for $i from 0 through 100 {
		$iteration: Map();
		@each $animationName in MapGetKeys($animations){
			$animationConfig: MapGetValue($animations,$animationName);
			$easing: MapGetValue($animationConfig,easing);
			$start: MapGetValue($animationConfig,start);
			$end: MapGetValue($animationConfig,end);
			$iteration: MapSetKey($iteration,$animationName,_tween($easing,$start,$end,$i,100));
		}
		$iterations: append($iterations,$iteration);
	}
	@include keyframes($name){
		@for $i from 0 through 100 {
			$nth: $i + 1;
			$previousIteration: false;
			$nextIteration: false;
			$currentIteration: nth($iterations,$nth);
			@if $nth > 1 {
				$previousIteration: nth($iterations,$nth - 1);
			}
			@if $nth <= 100 {
				$nextIteration: nth($iterations,$nth + 1);
			}
			$p: $i * 1%;
			$contentMap: Map();
			#{$p} {
				@each $animationName in MapGetKeys($currentIteration){
					$previousAnimationValue: MapGetValue($previousIteration,$animationName,false);
					$currentAnimationValue: MapGetValue($currentIteration,$animationName,false);
					$nextAnimationValue: MapGetValue($nextIteration,$animationName,false);
					// TODO: Implement better algorithm.
					//@if $nextAnimationValue != $currentAnimationValue or $previousAnimationValue != $currentAnimationValue {
						$contentMap: MapSetKey($contentMap,$animationName,$currentAnimationValue);
					//}
				}
				
				$_: StartContent($contentMap);
				@content;
				$_: EndContent();
			}
		}
	}
	
	@include animation($name linear 1s);
}
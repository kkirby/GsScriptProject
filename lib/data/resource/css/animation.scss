@import (css)(sys.animationTweens);

@function _tween($start,$end,$func,$iteration){
	@if $iteration >= 1 {
		@return $end;
	}
	$percent: call(tween-#{$func},$iteration);
	@if type-of($start) == color {
		@return mix($end,$start,force-range($percent,0,1) * 100%);
	}
	@else {
		$value: $start + ($end - $start) * $percent;
		@if unit($value) == px {
			@return round($value);
		}
		@else if unitless($value) {
			@return rounded($value,3);
		}
		@else {
			@return rounded($value,2);
		}
	}
}

@mixin tween($duration,$animations...){
	$animations: keywords($animations);
	$name: keyframes#{uuid()};
	@include keyframes($name){
		@for $iteration from 0 through 100 {
			$decimal: $iteration / 100;
			#{$iteration * 1%} {
				$contentMap: ();
				@each $animationName, $animationConfig in $animations {
					$contentMap: map-merge(
						$contentMap,
						(#{$animationName}: _tween(append($animationConfig,$decimal)...))
					);
				}
				$_: start-content($contentMap);
				@content;
				$_: end-content();
			}
		}
	}
	@include animation($name linear $duration);
}

@mixin tween-with-name($name,$animations...){
	$animations: keywords($animations);
	@include keyframes($name){
		@for $iteration from 0 through 100 {
			$decimal: $iteration / 100;
			#{$iteration * 1%} {
				$contentMap: ();
				@each $animationName, $animationConfig in $animations {
					$contentMap: map-merge(
						$contentMap,
						(#{$animationName}: _tween(append($animationConfig,$decimal)...))
					);
				}
				$_: start-content($contentMap);
				@content;
				$_: end-content();
			}
		}
	}
}


$items: (
	image: (
		selector: '.PlayerImageContainer',
		animation: zoomIn,
		duration: 1s
	),
	basicInfo: (
		selector: '.BasicInformation row:nth-child(@7) label',
		animation: slideIn,
		duration: 1s,
		start: .5s after image,
		nth-child-start: .5s after previous
	)
);

@mixin do-stuff($config){
	$times: ();
	
	@each $name, $animation in $config {
		$duration: $animation.duration;
		$total-duration: $duration;
		@if $animation.start == null {
			
		}
	}
}

@import (css)(sys.bourbon);
@import (css)(sys.math);
@import (css)(sys.contentVars);

@function scale-all($scale){
	@return scale($scale,$scale);
}

// Order of the includes matters, and it is: normal, bold, italic, bold+italic.

@function str-last-index($string,$substring){
	$last-index: null;
	$count: 0;
	@while true {
		$index: str-index($string,$substring);
		@if $index == null {
			@if $count == 0 {
				@return -1;
			}
			@else {
				@return $count;
			}
		}
		@else {
			$count: $count + $index;
			$last-index: $index;
			$string: str-slice($string,$last-index + 1);
		}
	}
}

@function str-first-index($string,$substring){
	$index: str-index($string,$substring);
	@if $index == null {
		@return -1;
	}
	@else {
		@return $index;
	}
}

@function get-font-url-info($font-url){
	$url: null;
	$type: null;
	$extension: null;
	@if str-index($font-url,'url') != null {
		$url: str-slice($font-url,str-index($font-url,'(') + 1,str-index($font-url,')') - 1);
	}
	@if str-index($url,'"') != null or str-index($url,"'") != null {
		$url: str-slice($url,2,str-length($url) - 1);
	}
	
	$extension-index: str-index($url,'.');
	@if $extension-index != null {
		$extension: str-slice($url,$extension-index + 1);
	}
	@if $extension != null {
		@if $extension == eot {
			$type: embedded-opentype;
		}
		@else if $extension == otf {
			$type: opentype;
		}
		@else if $extension == woff {
			$type: woff;
		}
		@else if $extension == ttf {
			$type: truetype;
		}
		@else if $extension == svg {
			$name: str-slice($url,str-last-index($url,'/') + 1,-5);
			$url: $url + '#' + $name;
			$type: svg;
		}
	}
	@return (url:$url,extension:$extension,type:$type);
}

// TODO: Finish this code.
@mixin my-font-face($font-family, $fonts, $weight: normal, $style: normal, $disable: null){
	@font-face {
		font-family: $font-family;
		font-weight: $weight;
		font-style: $style;
		$font-srcs: ();
		@each $font in $fonts {
			$info: get-font-url-info($font);
			@if $info.extension != null {
				@if $disable == null or index($disable,$info.extension) == null {
					$url: $info.url;
					$font-srcs: append($font-srcs,url('#{$url}') format('#{$info.type}'),comma);
				}
			}
		}
		src: $font-srcs;
	}
}

@mixin background-gradient($colors...){
	$formatA: null;
	$formatB: null;
	$formatC: null;
	
	$direction: nth($colors,1);
	@if $direction == 'top' {
		$formatA: top;
		$formatB: linear, left top, left bottom;
		$formatC: to bottom;
	}
	@elseif $direction == 'bottom' {
		$formatA: bottom;
		$formatB: linear, left bottom, left top;
		$formatC: to top;
	}
	@elseif $direction == 'left' {
		$formatA: left;
		$formatB: linear, left top, right top;
		$formatC: to right;
	}
	@elseif $direction == 'right' {
		$formatA: right;
		$formatB: linear, right top, left top;
		$formatC: to left;
	}
	@elseif type-of($direction) == 'number' {
		$formatA: $direction;
		$formatC: ($direction + (360deg / 2)) % 360;
		$deg: ($direction + 360deg) % 360;
		@if $deg == 45deg {
			$formatB: linear, right top, left bottom;
		}
		@elseif $deg == 135deg {
			$formatB: linear, right bottom, left top;
		}
		@elseif $deg == 225deg {
			$formatB: linear, left bottom, right top;
		}
		@elseif $deg == 315deg {
			$formatB: linear, left top, right bottom;
		}
	}
	$prepend: null;
	$append: null;
	$hasColor: false;
	@for $i from 2 through length($colors) {
		$colorGroup: nth($colors,$i);
		@if type-of($colorGroup) == 'string' {
			@if $hasColor {
				@if $append == null {
					$append: $colorGroup;
				}
				@else {
					$append: append($append,$colorGroup,'comma');
				}
			}
			@else {
				@if $prepend == null {
					$prepend: $colorGroup;
				}
				@else {
					$prepend: append($prepend,$colorGroup,'comma');
				}
			}
		}
		@else {
			$hasColor: true;
			$color: nth($colorGroup,1);
			$offset: nth($colorGroup,2);
			$formatA: append($formatA,$color $offset,'comma');
			$formatB: append($formatB,color-stop($offset,$color),'comma');
			$formatC: append($formatC,$color $offset,'comma');
		}
	}
	
	background-image: join($prepend,join(-moz-linear-gradient($formatA),$append),'comma');
	background-image: join($prepend,join(-webkit-gradient($formatB),$append),'comma');
	background-image: join($prepend,join(-webkit-linear-gradient($formatA),$append),'comma');
	background-image: join($prepend,join(-o-linear-gradient($formatA),$append),'comma');
	background-image: join($prepend,join(-ms-linear-gradient($formatA),$append),'comma');
	background-image: join($prepend,join(linear-gradient($formatC),$append),'comma');
}

@mixin view($x,$y,$width: auto,$height: auto){
	position: absolute;
	$top: $y;
	$left: $x;
	$right: auto;
	$bottom: auto;
	@if(type-of($top) == 'number' and $top < 0){
		$bottom: abs($top+1);
		$top: auto;
	}
	@if(type-of($left) == 'number' and $left < 0){
		$right: abs($left+1);
		$left: auto;
	}
	@if(type-of($width) == 'number' and $width < 0){
		@if($right == auto){
			$right: abs($width+1);
		}
		@else {
			$left: abs($width+1);
		}
		$width: auto;
	}
	@if(type-of($height) == 'number' and $height < 0){
		@if($bottom == auto){
			$bottom: abs($height+1);
		}
		@else {
			$top: abs($height+1);
		}
		$height: auto;
	}
	$transform: ();
	@if(type-of($top) == 'string' and $top == center){
		@if($height != auto){
			$top: 50%;
			margin-top: -1*round($height/2);
		}
		@else {
			$top: 50%;
			$transform: append($transform,translateY(-50%),space);
		}
	}
	@if(type-of($left) == 'string' and $left == center){
		@if($width != auto){
			$left: 50%;
			margin-left: -1*round($width/2);
		}
		@else {
			$left: 50%;
			$transform: append($transform,translateX(-50%),space);
		}
	}
	@if($top != auto){
		top: $top;
	}
	@if($right != auto){
		right: $right;
	}
	@if($bottom != auto){
		bottom: $bottom;
	}
	@if($left != auto){
		left: $left;
	}
	@if($width != auto){
		width: $width;
	}
	@if($height != auto){
		height: $height;
	}
	@if(length($transform) > 0){
		-webkit-transform: translateZ(0) scale(1.0, 1.0) $transform;
	}
}

@function neg($value){
	@return (-1 * $value) - 1;
}

@mixin disable-selection(){
	-webkit-touch-callout: none;
	@include user-select(none);
}

@mixin for-attrs($attrName,$attrValues...){
	$selectors: ();
	@each $attrValue in $attrValues {
		$selectors: append($selectors,unquote('&[#{$attrName}="#{$attrValue}"]'),comma);
	}
	#{$selectors} {
		@content;
	}
}

@mixin font($attrs){
	$family: null;
	$bold: false;
	$italic: false;
	$size: null;
	$color: null;
	$uppercase: false;
	$direction: null;
	@each $attr in $attrs {
		@if $attr == 100 or $attr == 200 or $attr == 300 or $attr == 500 or $attr == 500 or $attr == 700 or $attr == 800 or $attr == 900 {
			$bold: $attr;
		}
		@else if type-of($attr) == number {
			$size: $attr;
		}
		@else if $attr == bold {
			$bold: bold;
		}
		@else if $attr == bolder {
			$bold: bolder;
		}
		@else if $attr == italic {
			$italic: true;
		}
		@else if $attr == uppercase {
			$uppercase: true;
		}
		@else if $attr == left {
			$direction: left;
		}
		@else if $attr == center {
			$direction: center;
		}
		@else if $attr == right {
			$direction: right;
		}
		@else if type-of($attr) == color {
			$color: $attr;
		}
		@else {
			$family: $attr;
		}
	}
	@if $family != null {
		font-family: $family;
	}
	@if $bold != false {
		font-weight: $bold;
	}
	@if $size {
		font-size: $size;
	}
	@if $italic {
		font-style: italic;
	}
	@if $uppercase {
		text-transform: uppercase;
	}
	@if $direction != null {
		text-align: $direction;
	}
	@if $color != null {
		color: $color;
	}
}

@mixin state($states,$append: ''){
	$selectorsA: ();
	$selectorsB: ();
	$selectorsC: ();
	@each $state in $states {
		$selectorsA: append($selectorsA,unquote('.#{$append}#{$state}'),comma);
		$selectorsB: append($selectorsB,unquote('&.#{$append}#{$state} .#{$append}#{$state}'),comma);
		$selectorsC: append($selectorsC,unquote('&.#{$append}#{$state} span.#{$append}#{$state}'),comma);
	}
	#{$selectorsA} {
		display: none;
	}
	#{$selectorsB} {
		display: block;
	}
	
	#{$selectorsC} {
		display: inline;
	}
}
(function () {
  "use strict";
  var __generator, __isArray, __slice, __toArray, __typeof, expect, fun, i,
      iter, ran, stub;
  __generator = function (func) {
    return function () {
      var args, self;
      self = this;
      args = arguments;
      return {
        iterator: function () {
          return this;
        },
        send: function () {
          var value;
          if (args) {
            value = func.apply(self, __toArray(args));
            self = null;
            args = null;
          }
          return { done: true, value: value };
        },
        next: function () {
          return this.send();
        },
        "throw": function (err) {
          self = null;
          args = null;
          throw err;
        }
      };
    };
  };
  __isArray = typeof Array.isArray === "function" ? Array.isArray
    : (function () {
      var _toString;
      _toString = Object.prototype.toString;
      return function (x) {
        return _toString.call(x) === "[object Array]";
      };
    }());
  __slice = Array.prototype.slice;
  __toArray = function (x) {
    if (x == null) {
      throw TypeError("Expected an object, got " + __typeof(x));
    } else if (__isArray(x)) {
      return x;
    } else if (typeof x === "string") {
      return x.split("");
    } else if (typeof x.length === "number") {
      return __slice.call(x);
    } else {
      throw TypeError("Expected an object with a length property, got " + __typeof(x));
    }
  };
  __typeof = (function () {
    var _toString;
    _toString = Object.prototype.toString;
    return function (o) {
      if (o === void 0) {
        return "Undefined";
      } else if (o === null) {
        return "Null";
      } else {
        return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
      }
    };
  }());
  expect = require("chai").expect;
  stub = require("sinon").stub;
  ran = stub();
  fun = __generator(function () {
    ran();
    return "hello";
  });
  iter = fun();
  expect(iter.next()).to.eql({ done: true, value: "hello" });
  for (i = 0; i < 10; ++i) {
    expect(iter.next()).to.eql({ done: true, value: void 0 });
  }
  expect(ran).to.be.calledOnce;
}.call(this));
